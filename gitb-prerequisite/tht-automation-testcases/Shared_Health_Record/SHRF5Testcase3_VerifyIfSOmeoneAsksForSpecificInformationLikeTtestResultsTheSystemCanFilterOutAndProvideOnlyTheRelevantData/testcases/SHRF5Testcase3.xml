<?xml version="1.0" encoding="UTF-8"?>
<testcase id="verify_system_can_provide_specific_information" xmlns="http://www.gitb.com/tdl/v1/" xmlns:gitb="http://www.gitb.com/core/v1/">
    <metadata>
		<gitb:name>Verify system can provide specific information</gitb:name>
		<gitb:type>CONFORMANCE</gitb:type>
		<gitb:version>1.0</gitb:version>
		<gitb:description>Test case to Verify system can provide specific information</gitb:description>
	</metadata>
    <imports>
        <!-- read data from the JSON stores in name as json string-->
        <artifact type="binary" encoding="UTF-8" name="patientToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/PatientToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="practitioner1ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/Practitioner1ToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="practitioner2ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/Practitioner2ToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="observation1ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/Observation1ToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="observation2ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/Observation2ToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="diagnosticReport1ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/DiagnosticReport1ToCreate.json</artifact>
        <artifact type="binary" encoding="UTF-8" name="diagnosticReport2ToCreateInJsonString">/SHRF5Testcase3_VerifyIfSOmeoneAsksForSpecificInformationLikeTtestResultsTheSystemCanFilterOutAndProvideOnlyTheRelevantData/resources/DiagnosticReport2ToCreate.json</artifact>
    </imports>
    <variables>
        <var name="componentURI" type="string"/>
        <var name="username" type="string"/>
        <var name="password" type="string"/>
        <var name="loginUrl" type="string"/>
        <var name="loginType" type="string"/>
        <var name="clientSecret" type="string"/>
        <var name="clientId" type="string"/>
        <var name="headerParamName" type="string"/>
        <var name="headerParamValue" type="string"/>
    </variables>
    <actors>
		<gitb:actor id="ITB" name="ITB" role="SUT"/>
		<gitb:actor id="FhirHandler" name="FhirHandlers" role="SIMULATED"/>
	</actors>
    <steps stopOnError="true">

        <!--
            assign will stores value in variable, and it can be used as $variable_name

            right now ITB doesn't support parsing JsonString as map/array
            but it has specific type anyContent which works as map
            and we can do stuff like $variable_name{$property_name_1}{0}{$property_name_2}

            Detailed document : https://www.itb.ec.europa.eu/docs/tdl/latest/expressions/index.html#referring-to-variables
        -->
        <assign to="resourceType" type="string">'Patient'</assign>


        <!-- 
            send operation execute send method of handler (Which is written in JavaCode)
            send operation's response will get stored in id 


            Right now we have following custom handlers with following inputs:
            1. $DOMAIN{jsonStringConverterServiceAddress} - converts anyContent <-> jsonString
                1.body
                    - required 
                    - body which needs to be converted anyContent <-> jsonString                
                2.bodyType
                    - optional
                    - default value = anyContent
                    - possible value = jsonString, anyContent
                    - convert body to opposite type.
            Response 
                - Structure $send_id{convertedBody}

            2. $DOMAIN{fhirContextServiceAddress} - make operations for the FHIR
                1.fhirServerBaseUrl
                    - required
                    - base URL of FHIR Server
                2.fhirVersion
                    - optional
                    - default value = R4
                    - possible value = DSTU2, DSTU3, STU3, R4, R4B, R5, Partial version strings (e.g. "3.0")
                3.connectTimeout
                    - optional
                    - deafault value = 60000 (in milliseconds)
                    - Sets the connect timeout, in milliseconds. This is the amount of time that the initial connection attempt network operation may block without failing.
                4.socketTimeout
                    - optional
                    - deafault value = 60000 (in milliseconds)
                    - Sets the socket timeout, in milliseconds. This is the SO_TIMEOUT time, which is the amount of time that a read/write network operation may block without failing.
                5.userName
                    - optional
                    - username for the basic username/password based authentication/authorization
                6.password
                    - optional
                    - password for the basic username/password based authentication/authorization
                7.token
                    - optional
                    - token for the bearer token based authentication/authorization
                8.responseType
                    - optional
                    - default value = anyContent
                    - possible value = jsonString, anyContent
                9.operationType
                    - required
                    - possible value = create, update, delete, search, getById, getHistoryById
                    
                extra parameters depending on operation:
                create/update:
                    1.bodyType
                        - optional
                        - default value = anyContent
                        - possible value = jsonString, anyContent
                    2.body
                        -required
                        -resource data which needs to be created/update
                search:
                    1.fhirResourceType
                        - required
                        - possible value = Patient, etc.
                        - ResourceType of FHIR resource which needs to be fetched
                    2.parameters
                        -required
                        -parameters as query parameters for filter
                getById/delete/getHistoryById:
                    1.fhirResourceType
                        - required
                        - possible value = Patient, etc.
                        - ResourceType of FHIR resource for which we're making operation
                    2.fhirResourceId
                        - required
                        - ID of FHIR resource for which we're making operation
            Response Structure 
                - $send_id{request}{endpoint}
                - $send_id{request}{body}
                - $send_id{response}{status}
                - $send_id{response}{body}

            3. $DOMAIN{apiCallServiceAddress} - make any kind of calls
                1.httpMethod
                    - required
                    - possible value = GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE
                    - Http Method Types
                2.url
                    - required
                    - url for the Http Request
                3.mediaType
                    -optional
                    -deafult value = application/json, etc
                    -mediaType for the Http Call
                3.body
                    -optional
                    -request body for the Http Call
                4.header
                    -optional
                    -header parameters for the Http Call
                5.responseType
                    - optional
                    - default value = anyContent
                    - possible value = jsonString, anyContent
            Response Structure 
                - $send_id{request}{endpoint}
                - $send_id{request}{body}
                - $send_id{response}{status}
                - $send_id{response}{body}
        -->

        <!-- Convert Patient Data -->

        <send id="patientToCreate" desc="Convert patientToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$patientToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <!--
            Add log
        -->
        <log>'Converted Patient Data'</log>
        <log>$patientToCreate</log>

        <send id="createdPatient" desc="Create Patient in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$patientToCreate{convertedBody}</input>
        </send>

        <log>'Created Patient Data'</log>
        <log>$createdPatient</log>

        <!--
            verify data
        -->
        <verify id="verifyCreatePatient" handler="StringValidator" desc="Check that patient got created successfully or not with correct data.">
            <input name="actualstring">$createdPatient{response}{body}{birthDate}</input>
            <input name="expectedstring">'1970-01-01'</input>
        </verify>

        <!-- Convert Practitioner1 Data -->

        <send id="practitioner1ToCreate" desc="Convert practitioner1ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$practitioner1ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <!--
            Add log
        -->
        <log>'Converted Practitioner 1 Data'</log>
        <log>$practitioner1ToCreate</log>

        <send id="createdPractitioner1" desc="Create Practitioner 1 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$practitioner1ToCreate{convertedBody}</input>
        </send>

        <log>'Created Practitioner 1 Data'</log>
        <log>$createdPractitioner1</log>

        <!--
            verify data
        -->
        <verify id="verifyCreatePractitioner1" handler="StringValidator" desc="Check that practitioner 1 got created successfully or not with correct data.">
            <input name="actualstring">$createdPractitioner1{response}{body}{birthDate}</input>
            <input name="expectedstring">'1970-10-22'</input>
        </verify>

        <!-- Convert Practitioner2 Data -->

        <send id="practitioner2ToCreate" desc="Convert practitioner2ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$practitioner2ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <!--
            Add log
        -->
        <log>'Converted Practitioner 2 Data'</log>
        <log>$practitioner2ToCreate</log>

        <send id="createdPractitioner2" desc="Create Practitioner 2 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$practitioner2ToCreate{convertedBody}</input>
        </send>

        <log>'Created Practitioner 2 Data'</log>
        <log>$createdPractitioner2</log>

        <!--
            verify data
        -->
        <verify id="verifyCreatePractitioner2" handler="StringValidator" desc="Check that practitioner 2 got created successfully or not with correct data.">
            <input name="actualstring">$createdPractitioner2{response}{body}{birthDate}</input>
            <input name="expectedstring">'1970-10-20'</input>
        </verify>

        <!-- Convert Observation1 Data -->

        <send id="observation1ToCreate" desc="Convert observation1ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$observation1ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <assign to="observation1ToCreate{convertedBody}{performer}{0}{reference}">'Practitioner/'||$createdPractitioner1{response}{body}{id}</assign>

        <!--
            Add log
        -->
        <log>'Converted Observation 1 Data'</log>
        <log>$observation1ToCreate</log>

        <send id="createdObservation1" desc="Create Observation 1 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$observation1ToCreate{convertedBody}</input>
        </send>

        <log>'Created Observation 1 Data'</log>
        <log>$createdObservation1</log>

        <!--
            verify data
        -->
        <verify id="verifyCreateObservation1" handler="StringValidator" desc="Check that observation 1 got created successfully or not with correct data.">
            <input name="actualstring">$createdObservation1{response}{body}{code}{coding}{0}{code}</input>
            <input name="expectedstring">'Code'</input>
        </verify>

        <!-- Convert Observation2 Data -->

        <send id="observation2ToCreate" desc="Convert observation2ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$observation2ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <assign to="observation2ToCreate{convertedBody}{performer}{0}{reference}">'Practitioner/'||$createdPractitioner2{response}{body}{id}</assign>

        <!--
            Add log
        -->
        <log>'Converted Observation 2 Data'</log>
        <log>$observation2ToCreate</log>

        <send id="createdObservation2" desc="Create Observation 2 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$observation2ToCreate{convertedBody}</input>
        </send>

        <log>'Created Observation 2 Data'</log>
        <log>$createdObservation2</log>

        <!--
            verify data
        -->
        <verify id="verifyCreateObservation2" handler="StringValidator" desc="Check that observation 2 got created successfully or not with correct data.">
            <input name="actualstring">$createdObservation2{response}{body}{code}{coding}{0}{code}</input>
            <input name="expectedstring">'Code'</input>
        </verify>

        <!-- Convert Diagnostic Report 1 Data -->

        <send id="diagnosticReport1ToCreate" desc="Convert diagnosticReport1ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$diagnosticReport1ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <assign to="diagnosticReport1ToCreate{convertedBody}{subject}{reference}">'Patient/'||$createdPatient{response}{body}{id}</assign>
        <assign to="diagnosticReport1ToCreate{convertedBody}{performer}{0}{reference}">'Practitioner/'||$createdPractitioner1{response}{body}{id}</assign>
        <assign to="diagnosticReport1ToCreate{convertedBody}{result}{0}{reference}">'Observation/'||$createdObservation1{response}{body}{id}</assign>

        <!--
            Add log
        -->
        <log>'Converted Diagnostic Report 1 Data'</log>
        <log>$diagnosticReport1ToCreate</log>

        <send id="createdDiagnosticReport1" desc="Create Diagnostic Report 1 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$diagnosticReport1ToCreate{convertedBody}</input>
        </send>

        <log>'Created Diagnostic Report 1 Data'</log>
        <log>$createdDiagnosticReport1</log>

        <!--
            verify data
        -->
        <verify id="verifyCreateDiagnosticReport1" handler="StringValidator" desc="Check that diagnostic report 1 got created successfully or not with correct data.">
            <input name="actualstring">$createdDiagnosticReport1{response}{body}{subject}{reference}</input>
            <input name="expectedstring">'Patient/'||$createdPatient{response}{body}{id}</input>
        </verify>

        <!-- Convert Diagnostic Report 2 Data -->

        <send id="diagnosticReport2ToCreate" desc="Convert diagnosticReport2ToCreate jsonString => anyContent" from="ITB" to="FhirHandler"
                handler="$DOMAIN{jsonStringConverterServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$diagnosticReport2ToCreateInJsonString</input>
            <input name="bodyType">"jsonString"</input>
        </send>

        <assign to="diagnosticReport2ToCreate{convertedBody}{subject}{reference}">'Patient/'||$createdPatient{response}{body}{id}</assign>
        <assign to="diagnosticReport2ToCreate{convertedBody}{performer}{0}{reference}">'Practitioner/'||$createdPractitioner2{response}{body}{id}</assign>
        <assign to="diagnosticReport2ToCreate{convertedBody}{result}{0}{reference}">'Observation/'||$createdObservation2{response}{body}{id}</assign>

        <!--
            Add log
        -->
        <log>'Converted Diagnostic Report 2 Data'</log>
        <log>$diagnosticReport2ToCreate</log>

        <send id="createdDiagnosticReport2" desc="Create Diagnostic Report 2 in FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"create"</input>
            <input name="body">$diagnosticReport2ToCreate{convertedBody}</input>
        </send>

        <log>'Created Diagnostic Report 2 Data'</log>
        <log>$createdDiagnosticReport2</log>

        <!--
            verify data
        -->
        <verify id="verifyCreateDiagnosticReport2" handler="StringValidator" desc="Check that diagnostic report 2 got created successfully or not with correct data.">
            <input name="actualstring">$createdDiagnosticReport2{response}{body}{subject}{reference}</input>
            <input name="expectedstring">'Patient/'||$createdPatient{response}{body}{id}</input>
        </verify>

        <!-- Search for Diagnostic Report -->

        <send id="searchedDiagnosticReport" desc="search same composition from the FHIR server" from="ITB" to="FhirHandler"
                handler="$DOMAIN{fhirContextServiceAddress}">
            <input name="fhirServerBaseUrl">$componentURI</input>
            <input name="username">$username</input>
            <input name="password">$password</input>
            <input name="loginUrl">$loginUrl</input>
            <input name="loginType">$loginType</input>
            <input name="clientSecret">$clientSecret</input>
            <input name="clientId">$clientId</input>
            <input name="headerParamName">$headerParamName</input>
            <input name="headerParamValue">$headerParamValue</input>
            <input name="operationType">"search"</input>
            <input name="fhirResourceType">'DiagnosticReport'</input>
            <input name="parameters">'patient=' || $createdPatient{response}{body}{id}</input>
        </send>

        <log>'Searched Diagnostic Report Data'</log>
        <log>$searchedDiagnosticReport</log>

        <verify id="verifySearchDiagnosticReportTotal" handler="StringValidator" desc="Check that search diagnostic report has correct number of entries.">
            <input name="actualstring">$searchedDiagnosticReport{response}{body}{total}</input>
            <input name="expectedstring">'2'</input>
        </verify>

        <foreach desc="Iterate list" counter="index" start="0" end="$searchedDiagnosticReport{response}{body}{total}">
            <do>
                <verify id="verifySearchDiagnosticReportResourceType" handler="StringValidator" desc="Check that search diagnostic report entry has correct resource type.">
                    <input name="actualstring">$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{resourceType}</input>
                    <input name="expectedstring">'DiagnosticReport'</input>
                </verify>

                <verify id="verifySearchDiagnosticReportSubjectReference" handler="StringValidator" desc="Check that search diagnostic report entry has correct subject reference.">
                    <input name="actualstring">$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{subject}{reference}</input>
                    <input name="expectedstring">'Patient/'||$createdPatient{response}{body}{id}</input>
                </verify>

                <assign to="verifyPerformerReference">'false'</assign>

                <if desc="Check performer reference">
                    <cond>$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{performer}{0}{reference} = $createdDiagnosticReport1{response}{body}{performer}{0}{reference}</cond>
                    <then>
                        <assign to="verifyPerformerReference">'true'</assign>
                    </then>
                </if>
                <if desc="Check performer reference">
                    <cond>$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{performer}{0}{reference} = $createdDiagnosticReport2{response}{body}{performer}{0}{reference}</cond>
                    <then>
                        <assign to="verifyPerformerReference">'true'</assign>
                    </then>
                </if>

                <verify id="verifySearchDiagnosticReportPerformerReference" handler="StringValidator" desc="Check that search diagnostic report entry has correct performer reference.">
                    <input name="actualstring">$verifyPerformerReference</input>
                    <input name="expectedstring">'true'</input>
                </verify>

                <assign to="verifyResultReference">'false'</assign>

                <if desc="Check result reference">
                    <cond>$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{result}{0}{reference} = $createdDiagnosticReport1{response}{body}{result}{0}{reference}</cond>
                    <then>
                        <assign to="verifyResultReference">'true'</assign>
                    </then>
                </if>
                <if desc="Check performer reference">
                    <cond>$searchedDiagnosticReport{response}{body}{entry}{$index}{resource}{result}{0}{reference} = $createdDiagnosticReport2{response}{body}{result}{0}{reference}</cond>
                    <then>
                        <assign to="verifyResultReference">'true'</assign>
                    </then>
                </if>

                <verify id="verifySearchDiagnosticReportResultReference" handler="StringValidator" desc="Check that search diagnostic report entry has correct result reference.">
                    <input name="actualstring">$verifyResultReference</input>
                    <input name="expectedstring">'true'</input>
                </verify>

            </do>
        </foreach>

    </steps>

    <output>
        <success>
            <case>
                <cond>$STEP_STATUS{verifyCreatePatient} = 'ERROR'</cond>
                <message>"Patient Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreatePractitioner1} = 'ERROR'</cond>
                <message>"Practitioner 1 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreatePractitioner2} = 'ERROR'</cond>
                <message>"Practitioner 2 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreateObservation1} = 'ERROR'</cond>
                <message>"Observation 1 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreateObservation2} = 'ERROR'</cond>
                <message>"Observation 2 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreateDiagnosticReport1} = 'ERROR'</cond>
                <message>"Diagnostic Report 1 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifyCreateDiagnosticReport2} = 'ERROR'</cond>
                <message>"Diagnostic Report 2 Creation Failed"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifySearchDiagnosticReportTotal} = 'ERROR'</cond>
                <message>"Diagnostic Report search does not have expected number of entries"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifySearchDiagnosticReportResourceType} = 'ERROR'</cond>
                <message>"Diagnostic Report search does not contain correct resource type"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifySearchDiagnosticReportSubjectReference} = 'ERROR'</cond>
                <message>"Diagnostic Report search does not contain correct subject reference"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifySearchDiagnosticReportPerformerReference} = 'ERROR'</cond>
                <message>"Diagnostic Report search does not contain correct performer reference"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{verifySearchDiagnosticReportResultReference} = 'ERROR'</cond>
                <message>"Diagnostic Report search does not contain correct result reference"</message>
            </case>
            <default>"Test case completed successfully."</default>
        </success>
        <failure>
            <default>"Test case failed."</default>
        </failure>
    </output>  
</testcase>
