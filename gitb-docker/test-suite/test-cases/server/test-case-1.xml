<testcase id="tc-server-001" xmlns="http://www.gitb.com/tdl/v1/" xmlns:gitb="http://www.gitb.com/core/v1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <metadata>
        <gitb:name>Test case 1: Receive and record allergy intolerances</gitb:name>
        <gitb:version>1.0</gitb:version>
        <gitb:description>The FHIR server receives from a FHIR client a series of valid allergy intolerances and proceeds to correctly validate and record them.</gitb:description>
        <gitb:documentation import="docs/server/test-case-1.html"/>
    </metadata>
    <actors>
        <gitb:actor id="client"/>
        <gitb:actor id="server" role="SUT"/>
    </actors>
    <steps stopOnError="true">
        <group title="Setup" desc="Test session setup" collapsed="true">
            <call path="scriptlets/setupData.xml">
                <input name="ingestData">$SYSTEM{ingestDataPerTestSession}</input>
                <input name="serverApiRoot">$SYSTEM{serverApiRoot}</input>
            </call>
        </group>
        <!--
            We define these expected values as variables so that we don't copy & paste them later on.
        -->
        <assign to="code1">"762952008"</assign>
        <assign to="code2">"227346004"</assign>
        <group id="firstAllergy" title="Step 1" desc="Submit first allergy">
            <!--
                When calling a scriptlet you can pass any number of inputs and optionally receive outputs. To manage outputs
                you can either define an ID for the step (that will be used to name an output map) or define the "output"
                attribute (which is more clear).
            -->
            <call path="scriptlets/registerAllergy.xml" output="registeredIdentifier1">
                <input name="codeCode">$code1</input>
                <input name="codeDisplay">"Peanut (substance)"</input>
                <input name="codeText">"Allergic to peanut"</input>
                <input name="reactionCode">"39579001"</input>
                <input name="reactionDisplay">"Anaphylactic reaction"</input>
            </call>
        </group>
        <group id="secondAllergy" title="Step 2" desc="Submit second allergy">
            <call path="scriptlets/registerAllergy.xml" output="registeredIdentifier2">
                <input name="codeCode">$code2</input>
                <input name="codeDisplay">"Chick peas (substance)"</input>
                <input name="codeText">"Allergic to chick peas"</input>
                <input name="reactionCode">"39579001"</input>
                <input name="reactionDisplay">"Anaphylactic reaction"</input>
            </call>
        </group>
        <group id="verifyAllergies" title="Step 3" desc="Check patient allergies">
            <!--
                The "assign" step is quite versatile depending on how the "to" is defined. For example:
                - to="var" assigns to a regular variable.
                - to="var{foo}" indicates a map with named items (existing or new to be created)
                - to="anything" append="true" indicates a list (due to the append attribute).

                In this case we want to prepare a list of maps to pass as an input to the scriptlet.
                The "first" and "second" assignments create two maps with named items matching the 
                defined values (provided as variable references). The final "append" assignments
                take those two maps and create a list named "expectedData" (i.e. a list of maps)
                that we use as the final input parameter.
            -->
            <assign to="first{code}">$code1</assign>
            <assign to="first{identifier}">$registeredIdentifier1</assign>
            <assign to="second{code}">$code2</assign>
            <assign to="second{identifier}">$registeredIdentifier2</assign>
            <assign to="expectedData" append="true">$first</assign>
            <assign to="expectedData" append="true">$second</assign>
            <call path="scriptlets/checkRegisteredAllergies.xml">
                <input name="expectedData">$expectedData</input>
            </call>
        </group>
    </steps>
    <output>
        <success>
            <default>"Test case completed successfully."</default>
        </success>
        <failure>
            <case>
                <cond>$STEP_STATUS{firstAllergy} = 'ERROR'</cond>
                <message>"The first submitted allergy was not successfully registered."</message>
            </case>        
            <case>
                <cond>$STEP_STATUS{secondAllergy} = 'ERROR'</cond>
                <message>"The second submitted allergy was not successfully registered."</message>
            </case>        
            <case>
                <cond>$STEP_STATUS{verifyAllergies} = 'ERROR'</cond>
                <message>"The submitted allergies were not reported as correctly registered."</message>
            </case>        
            <default>"Test case failed. Please check the failed step's report for more information and the test log."</default>
        </failure>
    </output>    
</testcase>